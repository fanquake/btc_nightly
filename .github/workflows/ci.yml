name: nightly
on:
  push:
  pull_request:
  schedule:
    - cron: '49 04 * * 0,3'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  container-tests:
    strategy:
      fail-fast: false
      matrix:
          conf:
            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++;-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG" -DSANITIZERS=thread
              task_adjustments: ''
              desc: "libc++ DEBUG tsan"
              test: fun,fuzz
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION}" -DSANITIZERS=thread -DBUILD_GUI=OFF
              task_adjustments: ''
              desc: "clang tsan"
              test: fun
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="/opt/gcc-latest/bin/gcc" -DCMAKE_CXX_COMPILER="/opt/gcc-latest/bin/g++;-static-libstdc++" -DSANITIZERS=thread -DBUILD_GUI=OFF -DAPPEND_CXXFLAGS="-O3 -g2 -Wno-error=maybe-uninitialized -Wno-error=array-bounds -Wno-error=use-after-free -Wno-error=sfinae-incomplete"
              task_adjustments: |
                dnf install -y libtsan
                echo 'race:libQt6Core' >> test/sanitizer_suppressions/tsan
                echo 'race:libQt6Test' >> test/sanitizer_suppressions/tsan
              desc: "g++ tsan"
              test: fun
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++;-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG"
              task_adjustments: ''
              desc: "libc++ DEBUG ARM"
              test: fun,fuzz
              os: ubuntu-24.04-arm

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++;-funsigned-char" -DSANITIZERS=address,float-divide-by-zero,integer,undefined
              task_adjustments: ''
              desc: "libc++ asan -funsigned-char"
              test: fun,fuzz
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-funsigned-char" -DSANITIZERS=address,float-divide-by-zero,integer,undefined -DBUILD_GUI=ON
              task_adjustments: ''
              desc: "clang asan -funsigned-char + gui"
              test: fun
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="/opt/gcc-latest/bin/gcc" -DCMAKE_CXX_COMPILER="/opt/gcc-latest/bin/g++;-static-libstdc++" -DSANITIZERS=address,undefined -DBUILD_GUI=ON -DAPPEND_CXXFLAGS="-O3 -g2 -Wno-error=maybe-uninitialized -Wno-error=array-bounds -Wno-error=use-after-free -Wno-error=sfinae-incomplete"
              task_adjustments: |
                dnf install -y libasan libubsan
                echo 'nonnull-attribute:streams.h' >> test/sanitizer_suppressions/ubsan
                echo 'nonnull-attribute:streams.cpp' >> test/sanitizer_suppressions/ubsan
              desc: "g++ asan + gui"
              test: fun,fuzz
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2 -flto' -DAPPEND_CFLAGS='-O3 -g2 -flto' -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++" -DAPPEND_LDFLAGS="-flto"
              task_adjustments: ''
              desc: "libc++ lto"
              test: fun,fuzz
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2 -flto' -DAPPEND_CFLAGS='-O3 -g2 -flto' -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="/opt/gcc-latest/bin/gcc" -DCMAKE_CXX_COMPILER="/opt/gcc-latest/bin/g++;-static-libstdc++;-D_GLIBCXX_DEBUG;-D_GLIBCXX_DEBUG_PEDANTIC"
              task_adjustments: ''
              desc: "g++ DEBUG lto"
              test: fun,fuzz
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2 -flto' -DAPPEND_CFLAGS='-O3 -g2 -flto' -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="/opt/gcc-latest/bin/gcc" -DCMAKE_CXX_COMPILER="/opt/gcc-latest/bin/g++;-static-libstdc++" -DBUILD_GUI=ON -DAPPEND_CXXFLAGS="-O3 -g2 -flto -Wno-error=sfinae-incomplete"
              task_adjustments: ''
              desc: "g++ lto"
              test: fun,fuzz
              os: ubuntu-24.04

            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DAPPEND_CPPFLAGS='-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES' -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libstdc++"
              task_adjustments: ''
              desc: "clang libstdc++ ARM"
              test: fun,fuzz
              os: ubuntu-24.04-arm

    name: '${{ matrix.conf.desc }} ${{ matrix.conf.test }}'
    runs-on: ${{ matrix.conf.os }}
    timeout-minutes: 360
    container:
      image: ${{ contains(matrix.conf.bld, 'gcc-latest') && 'fedora:latest' || 'ubuntu:24.04' }}

    steps:
      - &CHECKOUT_BC
        name: Checkout Bitcoin Core repo
        uses: actions/checkout@v5
        with:
          repository: bitcoin/bitcoin
          fetch-depth: 1

      - name: Set sanitizer suppressions (only for ctest+functional)
        run: |
          echo LSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/lsan" >> "$GITHUB_ENV"
          echo TSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/tsan:halt_on_error=1:second_deadlock_stack=1" >> "$GITHUB_ENV"
          echo UBSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1" >> "$GITHUB_ENV"

      - name: Install clang (Ubuntu)
        if: "!contains(matrix.conf.bld, 'gcc-latest')"
        run: |
          apt-get update && apt-get install -y software-properties-common curl
          curl "https://apt.llvm.org/llvm-snapshot.gpg.key" | apt-key add -
          . /etc/os-release
          REPO="deb http://apt.llvm.org/${VERSION_CODENAME} llvm-toolchain-${VERSION_CODENAME} main"
          add-apt-repository -y "${REPO}"
          apt-get update
          LLVM_VERSION=$( apt-cache search --names-only '^clang-[0-9]+$' | sort --version-sort | tail -1 | cut -f1 -d" " | cut -f2 -d"-" )
          echo "LLVM_VERSION=${LLVM_VERSION}" >> "$GITHUB_ENV"
          echo "LLVM_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-${LLVM_VERSION}" >> "$GITHUB_ENV"
          apt-get install -y clang-${LLVM_VERSION} libc++-${LLVM_VERSION}-dev libc++abi-${LLVM_VERSION}-dev git cmake pkg-config build-essential libboost-dev libevent-dev libsqlite3-dev libcapnp-dev capnproto libzmq3-dev ccache qt6-tools-dev qt6-l10n-tools qt6-base-dev libqrencode-dev systemtap-sdt-dev python3-zmq
          echo
          clang-${LLVM_VERSION} -v

      - name: Install gcc (Fedora)
        if: "contains(matrix.conf.bld, 'gcc-latest')"
        run: |
          dnf install -y git cmake pkgconfig boost-devel libevent-devel sqlite-devel capnproto capnproto-devel zeromq-devel ccache qt6-qttools-devel qt6-qtbase-devel qrencode-devel systemtap-sdt-devel python3-zmq libstdc++
          dnf -y copr enable jwakely/gcc-latest
          dnf -y install gcc-latest
          echo
          /opt/gcc-latest/bin/g++ --version

      - name: Apply matrix adjustments
        if: ${{ matrix.conf.task_adjustments != '' }}
        run: |
          ${{ matrix.conf.task_adjustments }}

      - name: Generate buildsystem
        run: >
          cmake -B bld \
            ${{ matrix.conf.bld }} \
            -DBUILD_BENCH=ON \
            -DBUILD_FUZZ_BINARY=ON \
            -DWITH_ZMQ=ON \
            -DWITH_USDT=ON \
            -DWERROR=ON

      - &BLD
        name: Build
        run: cmake --build ./bld -j $(nproc)

      - name: Run tests (ctest+functional)
        if: contains(matrix.conf.test, 'fun')
        run: &TESTS_RUN |
          ctest --output-on-failure --stop-on-failure --test-dir ./bld -j $(nproc)
          ./bld/test/functional/test_runner.py -j $(( $(nproc) * 2 )) --combinedlogslen=99999999 --timeout-factor=10 --extended --exclude "interface_bitcoin_cli,rpc_bind --ipv6"

      - name: Run tests (fuzz)
        if: contains(matrix.conf.test, 'fuzz')
        run: |
          git clone https://github.com/bitcoin-core/qa-assets --depth=1
          ./bld/test/fuzz/test_runner.py -l DEBUG -j $(nproc) ./qa-assets/fuzz_corpora/

  ci-mutation-matrix:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      CI_FAILFAST_TEST_LEAVE_DANGLING: 1  # GHA does not care about dangling processes and setting this variable avoids killing the CI script itself on error
      FILE_ENV: ${{ matrix.file-env }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'msan -O0'
            file-env: './ci/test/00_setup_env_native_msan.sh'
            clone-qa-assets: false
            task_adjustments: |
              sed -i 's/-O1/-O0/g' $FILE_ENV
              git --no-pager diff
          - name: 'fuzz msan -O0'
            file-env: './ci/test/00_setup_env_native_fuzz_with_msan.sh'
            clone-qa-assets: true
            task_adjustments: |
              sed -i 's/-O1/-O0/g' $FILE_ENV
              git --no-pager diff

    steps:
      - *CHECKOUT_BC

      - name: Maybe checkout qa-assets
        if: ${{ fromJSON(matrix.clone-qa-assets || 'false') }}
        uses: actions/checkout@v5
        with:
          path: qa-assets
          repository: bitcoin-core/qa-assets
          fetch-depth: 1

      - name: Maybe move qa-assets
        if: ${{ fromJSON(matrix.clone-qa-assets || 'false') }}
        run: |
          mkdir -p ./ci/scratch/qa-assets
          mv ./qa-assets/{.git,fuzz_corpora} ./ci/scratch/qa-assets/

      - name: Apply matrix adjustments
        if: ${{ matrix.task_adjustments != '' }}
        run: |
          ${{ matrix.task_adjustments }}

      - name: CI script
        run: ./ci/test_run_all.sh

  opensuse-tumbleweed:
    name: 'OpenSUSE Tumbleweed [system libs]'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    container:
      image: opensuse/tumbleweed

    steps:
      - *CHECKOUT_BC

      - name: Install dependencies (zypper)
        run: |
          zypper --non-interactive install -t pattern devel_basis
          zypper --non-interactive install e2fsprogs git pkg-config cmake python3 libevent-devel libboost_headers-devel gcc-c++ ccache zeromq-devel qt6-base-devel qt6-tools-devel qt6-linguist-devel qrencode-devel sqlite3-devel libcapnp-devel capnproto

      - name: Generate buildsystem
        run: |
          cmake -B bld \
            -DBUILD_BENCH=ON \
            -DBUILD_FUZZ_BINARY=ON \
            -DWERROR=ON \
            -DBUILD_GUI=ON \
            -DWITH_CCACHE=ON

      - *BLD

      - name: Run tests (ctest+functional)
        run: *TESTS_RUN

  alpine:
    name: 'Alpine [system libs]'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    container:
      image: alpine:latest

    steps:
      - *CHECKOUT_BC

      - name: Install dependencies (apk)
        run: |
          apk --no-cache add e2fsprogs-extra cmake g++ gcc git make pkgconfig python3 boost-dev libevent-dev zeromq-dev qt6-qtbase-dev qt6-qttools-dev ccache libqrencode-dev capnproto-dev

      - name: Generate buildsystem
        run: |
          cmake -B bld \
            -DBUILD_BENCH=ON \
            -DBUILD_FUZZ_BINARY=ON \
            -DWERROR=ON \
            -DBUILD_GUI=ON \
            -DWITH_CCACHE=ON

      - *BLD

      - name: Run tests (ctest+functional)
        run: *TESTS_RUN

  archlinux:
    name: 'Arch Linux [system libs]'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    container:
      image: archlinux:latest

    steps:
      - *CHECKOUT_BC

      - name: Install dependencies (pacman)
        run: |
          pacman --noconfirm -Syu e2fsprogs cmake git gcc make python3 boost libevent zeromq ccache qt6 qrencode capnproto

      - name: Generate buildsystem
        run: |
          cmake -B bld \
            -DBUILD_BENCH=ON \
            -DBUILD_FUZZ_BINARY=ON \
            -DWERROR=ON \
            -DBUILD_GUI=ON \
            -DWITH_CCACHE=ON

      - *BLD

      - name: Run tests (ctest+functional)
        run: *TESTS_RUN

  fedora:
    name: 'Fedora [system libs]'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    container:
      image: fedora:rawhide

    steps:
      - *CHECKOUT_BC

      - name: Install dependencies (dnf)
        run: |
          dnf install -y e2fsprogs ccache gcc-c++ make cmake libevent-devel boost-devel python3 qt6-qtbase-devel qt6-qttools-devel sqlite-devel capnproto capnproto-devel qrencode-devel systemtap-sdt-devel zeromq-devel

      - name: Generate buildsystem
        run: |
          cmake -B bld \
            -DBUILD_BENCH=ON \
            -DBUILD_FUZZ_BINARY=ON \
            -DWERROR=ON \
            -DBUILD_GUI=ON \
            -DWITH_CCACHE=ON \
            -DWITH_ZMQ=ON \
            -DWITH_USDT=ON

      - *BLD

      - name: Run tests (ctest+functional)
        run: *TESTS_RUN

  fedora-fuzz:
    name: 'Fedora fuzz, asan, system libs'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    container:
      image: fedora:rawhide

    steps:
      - *CHECKOUT_BC

      - name: Install dependencies (dnf)
        run: |
          dnf install -y make cmake libevent-devel boost-devel sqlite-devel capnproto capnproto-devel python3 clang llvm git

      - name: Generate buildsystem (fuzz)
        run: |
          cmake -B bld \
            -DWERROR=ON \
            -DWITH_CCACHE=ON \
            -DBUILD_FOR_FUZZING=ON \
            -DSANITIZERS=fuzzer,address,integer,undefined,float-divide-by-zero \
            -DCMAKE_C_COMPILER="clang" \
            -DCMAKE_CXX_COMPILER="clang++"

      - *BLD

      - name: Run fuzz tests
        run: |
          git clone https://github.com/bitcoin-core/qa-assets --depth=1 ./qa-assets
          export LSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/lsan"
          export TSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/tsan:halt_on_error=1"
          export UBSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1"
          ./bld/test/fuzz/test_runner.py -j $(nproc) -l DEBUG ./qa-assets/fuzz_corpora/

  mac-cross-intel:
    name: 'Linux->macOS Intel cross, no tests'
    runs-on: ubuntu-latest
    if: ${{ vars.SKIP_BRANCH_PUSH != 'true' || github.event_name == 'pull_request' }}

    env:
      FILE_ENV: './ci/test/00_setup_env_mac_cross_intel.sh'
      DANGER_CI_ON_HOST_FOLDERS: 1

    steps:
      - *CHECKOUT_BC

      - name: Configure environment
        uses: bitcoin/bitcoin/.github/actions/configure-environment@master

      - name: Restore caches
        id: restore-cache
        uses: bitcoin/bitcoin/.github/actions/restore-caches@master

      - name: Configure Docker
        uses: bitcoin/bitcoin/.github/actions/configure-docker@master
        with:
          cache-provider: 'gha'

      - name: CI script
        run: |
          ./ci/test_run_all.sh

      - name: Save caches
        uses: bitcoin/bitcoin/.github/actions/save-caches@master

      - name: Upload built executables
        uses: actions/upload-artifact@v4
        with:
          name: mac-cross-intel-executables-${{ github.run_id }}
          path: |
            ${{ env.BASE_BUILD_DIR }}/bin/*
            ${{ env.BASE_BUILD_DIR }}/src/secp256k1/bin/*
            ${{ env.BASE_BUILD_DIR }}/src/univalue/*
            ${{ env.BASE_BUILD_DIR }}/test/config.ini

  mac-native-test-intel-rosetta-2:
    name: 'macOS, test cross-built Intel on Rosetta 2'
    runs-on: macos-26  # Last release with Intel support, but GHA only offers Rosetta 2
    needs: mac-cross-intel

    env:
      TEST_RUNNER_TIMEOUT_FACTOR: 40

    steps:
      - *CHECKOUT_BC

      - name: Download built executables
        uses: actions/download-artifact@v4
        with:
          name: mac-cross-intel-executables-${{ github.run_id }}

      - name: Ensure downloaded binaries are executable
        run: chmod -R +x ./bin ./src/secp256k1/bin ./src/univalue

      - name: Run bitcoind
        run: ./bin/bitcoind -version

      - name: Run unit tests
        run: |
          ./bin/test_bitcoin -l test_suite
          ./src/secp256k1/bin/exhaustive_tests
          ./src/secp256k1/bin/noverify_tests
          ./src/secp256k1/bin/tests
          ./src/univalue/object
          ./src/univalue/unitester

      - name: Run benchmarks
        run: ./bin/bench_bitcoin -sanity-check

      - name: Adjust paths in test/config.ini
        run: |
          sed -i '' "s|^SRCDIR=.*|SRCDIR=${{ github.workspace }}|" test/config.ini
          sed -i '' "s|^BUILDDIR=.*|BUILDDIR=${{ github.workspace }}|" test/config.ini
          sed -i '' "s|^RPCAUTH=.*|RPCAUTH=${{ github.workspace }}/share/rpcauth/rpcauth.py|" test/config.ini
          cat test/config.ini

      - name: Set previous release directory
        run: |
          echo "PREVIOUS_RELEASES_DIR=${{ runner.temp }}/previous_releases" >> "$GITHUB_ENV"

      - name: Get previous releases
        run: ./test/get_previous_releases.py --target-dir $PREVIOUS_RELEASES_DIR

      - name: Run functional tests
        env:
          TEST_RUNNER_EXTRA: ${{ github.event_name != 'pull_request' && '--extended' || '' }}
        run: python3 test/functional/test_runner.py --jobs $(sysctl -n hw.ncpu) --ci --quiet --tmpdirprefix="$RUNNER_TEMP" --combinedlogslen=99999999 --timeout-factor=$TEST_RUNNER_TIMEOUT_FACTOR $TEST_RUNNER_EXTRA

  mac-cross:
    name: 'Linux->macOS cross, no tests'
    runs-on: ubuntu-latest
    if: ${{ vars.SKIP_BRANCH_PUSH != 'true' || github.event_name == 'pull_request' }}

    env:
      FILE_ENV: './ci/test/00_setup_env_mac_cross.sh'
      DANGER_CI_ON_HOST_FOLDERS: 1

    steps:
      - *CHECKOUT_BC

      - name: Configure environment
        uses: bitcoin/bitcoin/.github/actions/configure-environment@master

      - name: Restore caches
        id: restore-cache
        uses: bitcoin/bitcoin/.github/actions/restore-caches@master

      - name: Configure Docker
        uses: bitcoin/bitcoin/.github/actions/configure-docker@master
        with:
          cache-provider: 'gha'

      - name: CI script
        run: |
          ./ci/test_run_all.sh

      - name: Save caches
        uses: bitcoin/bitcoin/.github/actions/save-caches@master

      - name: Upload built executables
        uses: actions/upload-artifact@v4
        with:
          name: mac-cross-executables-${{ github.run_id }}
          path: |
            ${{ env.BASE_BUILD_DIR }}/bin/*
            ${{ env.BASE_BUILD_DIR }}/src/secp256k1/bin/*
            ${{ env.BASE_BUILD_DIR }}/src/univalue/*
            ${{ env.BASE_BUILD_DIR }}/test/config.ini

  mac-native-test:
    name: 'macOS, test cross-built'
    # The minimum supported macos version for releases
    runs-on: macos-14
    needs: mac-cross

    env:
      TEST_RUNNER_TIMEOUT_FACTOR: 40

    steps:
      - *CHECKOUT_BC

      - name: Download built executables
        uses: actions/download-artifact@v4
        with:
          name: mac-cross-executables-${{ github.run_id }}

      - name: Ensure downloaded binaries are executable
        run: chmod -R +x ./bin ./src/secp256k1/bin ./src/univalue

      - name: Run bitcoind
        run: ./bin/bitcoind -version

      - name: Run unit tests
        run: |
          ./bin/test_bitcoin -l test_suite
          ./src/secp256k1/bin/exhaustive_tests
          ./src/secp256k1/bin/noverify_tests
          ./src/secp256k1/bin/tests
          ./src/univalue/object
          ./src/univalue/unitester

      - name: Run benchmarks
        run: ./bin/bench_bitcoin -sanity-check

      - name: Adjust paths in test/config.ini
        run: |
          sed -i '' "s|^SRCDIR=.*|SRCDIR=${{ github.workspace }}|" test/config.ini
          sed -i '' "s|^BUILDDIR=.*|BUILDDIR=${{ github.workspace }}|" test/config.ini
          sed -i '' "s|^RPCAUTH=.*|RPCAUTH=${{ github.workspace }}/share/rpcauth/rpcauth.py|" test/config.ini
          cat test/config.ini

      - name: Set previous release directory
        run: |
          echo "PREVIOUS_RELEASES_DIR=${{ runner.temp }}/previous_releases" >> "$GITHUB_ENV"

      - name: Get previous releases
        run: ./test/get_previous_releases.py --target-dir $PREVIOUS_RELEASES_DIR

      - name: Run functional tests
        env:
          TEST_RUNNER_EXTRA: ${{ github.event_name != 'pull_request' && '--extended' || '' }}
        run: python3 test/functional/test_runner.py --jobs $(sysctl -n hw.ncpu) --ci --quiet --tmpdirprefix="$RUNNER_TEMP" --combinedlogslen=99999999 --timeout-factor=$TEST_RUNNER_TIMEOUT_FACTOR $TEST_RUNNER_EXTRA
