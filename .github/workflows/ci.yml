name: nightly
on:
  push:
  pull_request:
  schedule:
    - cron: '49 04 * * 0,3'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
          conf:
            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++;-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG" -DSANITIZERS=thread
              desc: "libc++ DEBUG tsan"
              test: fun
              os: ubuntu-24.04
            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++;-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG"
              desc: "libc++ DEBUG ARM"
              test: fun,fuzz
              os: ubuntu-24.04-arm
            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++" -DSANITIZERS=address,float-divide-by-zero,integer,undefined
              desc: "libc++ asan"
              test: fun,fuzz
              os: ubuntu-24.04
            - bld: -DAPPEND_CXXFLAGS='-O3 -g2 -flto' -DAPPEND_CFLAGS='-O3 -g2 -flto' -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libc++" -DAPPEND_LDFLAGS="-flto"
              desc: "libc++ lto"
              test: fun,fuzz
              os: ubuntu-24.04
            - bld: -DAPPEND_CXXFLAGS='-O3 -g2 -flto' -DAPPEND_CFLAGS='-O3 -g2 -flto' -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER="/opt/gcc-latest/bin/gcc" -DCMAKE_CXX_COMPILER="/opt/gcc-latest/bin/g++;-D_GLIBCXX_DEBUG;-D_GLIBCXX_DEBUG_PEDANTIC"
              desc: "g++ DEBUG lto"
              test: fun,fuzz
              os: ubuntu-24.04
            - bld: -DAPPEND_CXXFLAGS='-O3 -g2'       -DAPPEND_CFLAGS='-O3 -g2'       -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER="clang-${LLVM_VERSION}" -DCMAKE_CXX_COMPILER="clang++-${LLVM_VERSION};-stdlib=libstdc++"
              desc: "clang libstdc++ ARM"
              test: fun,fuzz
              os: ubuntu-24.04-arm
    name: '${{ matrix.conf.desc }} ${{ matrix.conf.test }}'
    runs-on: ${{ matrix.conf.os }}
    timeout-minutes: 360
    container:
      image: ${{ contains(matrix.conf.bld, 'gcc-latest') && 'fedora:latest' || 'ubuntu:24.04' }}

    steps:
      - name: Checkout Bitcoin Core repo
        uses: actions/checkout@v4
        with:
          repository: bitcoin/bitcoin

      - name: Set sanitizer suppressions (only for ctest+functional)
        run: |
          echo TSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/tsan:halt_on_error=1:second_deadlock_stack=1" >> "$GITHUB_ENV"
          echo UBSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1" >> "$GITHUB_ENV"

      - name: Install clang (Ubuntu)
        if: "!contains(matrix.conf.bld, 'gcc-latest')"
        run: |
          apt-get update && apt-get install -y software-properties-common curl
          curl "https://apt.llvm.org/llvm-snapshot.gpg.key" | apt-key add -
          . /etc/os-release
          REPO="deb http://apt.llvm.org/${VERSION_CODENAME} llvm-toolchain-${VERSION_CODENAME} main"
          add-apt-repository -y "${REPO}"
          apt-get update
          LLVM_VERSION=$( apt-cache search --names-only '^clang-[0-9]+$' | sort --version-sort | tail -1 | cut -f1 -d" " | cut -f2 -d"-" )
          echo "LLVM_VERSION=${LLVM_VERSION}" >> "$GITHUB_ENV"
          echo "LLVM_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-${LLVM_VERSION}" >> "$GITHUB_ENV"
          apt-get install -y clang-${LLVM_VERSION} libc++-${LLVM_VERSION}-dev libc++abi-${LLVM_VERSION}-dev git cmake pkg-config build-essential libboost-dev libevent-dev libsqlite3-dev libzmq3-dev systemtap-sdt-dev python3-zmq
          echo
          clang-${LLVM_VERSION} -v

      - name: Install gcc (Fedora)
        if: "contains(matrix.conf.bld, 'gcc-latest')"
        run: |
          dnf install -y git cmake pkgconfig boost-devel libevent-devel sqlite-devel zeromq-devel systemtap-sdt-devel python3-zmq
          dnf -y copr enable jwakely/gcc-latest
          dnf -y install gcc-latest
          echo
          /opt/gcc-latest/bin/g++ --version

      - name: Generate buildsystem
        run: >
          cmake -B bld \
            ${{ matrix.conf.bld }} \
            -DBUILD_BENCH=ON \
            -DBUILD_FUZZ_BINARY=ON \
            -DWITH_ZMQ=ON \
            -DWITH_USDT=ON \
            -DWERROR=ON

      - name: Build
        run: cmake --build ./bld -j $(nproc)

      - name: Run tests (ctest+functional)
        if: contains(matrix.conf.test, 'fun')
        run: |
          ctest --output-on-failure --stop-on-failure --test-dir ./bld -j $(nproc)
          ./bld/test/functional/test_runner.py -j $(( $(nproc) * 2 )) --combinedlogslen=99999999 --timeout-factor=10 feature_block  # Only run one test for now, due to ipv4 limitations/issues in some other tests

      - name: Run tests (fuzz)
        if: contains(matrix.conf.test, 'fuzz')
        run: |
          git clone https://github.com/bitcoin-core/qa-assets --depth=1
          ./bld/test/fuzz/test_runner.py -l DEBUG -j $(nproc) ./qa-assets/fuzz_corpora/
